const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

export async function generateAIAnswer(questionTitle: string, questionDescription: string): Promise<string> {
  if (!GEMINI_API_KEY) {
    throw new Error('Gemini API key not configured');
  }

  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `Please provide a helpful and detailed answer to this programming question:

Title: ${questionTitle}

Description: ${questionDescription}

Please provide a comprehensive answer with code examples if applicable. Format your response in HTML with proper tags for better readability.`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
      }),
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    const aiAnswer = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!aiAnswer) {
      throw new Error('No answer generated by AI');
    }

    // Convert markdown-like formatting to HTML
    let formattedAnswer = aiAnswer
      .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code>$2</code></pre>')
      .replace(/`([^`]+)`/g, '<code>$1</code>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>');

    // Wrap in paragraph tags if not already wrapped
    if (!formattedAnswer.startsWith('<')) {
      formattedAnswer = `<p>${formattedAnswer}</p>`;
    }

    return formattedAnswer;
  } catch (error) {
    console.error('Error generating AI answer:', error);
    throw new Error('Failed to generate AI answer. Please try again later.');
  }
}